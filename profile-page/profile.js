const API_URL = 'https://edu.std-900.ist.mospolytech.ru/exam-2024-1/api';
const API_KEY = 'dcb5d2ae-8c34-4792-96a9-b8819055c047';

let state = {
    orders: [],
    products: [],
    
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    const notification = document.createElement('div')
    notification.className = `notification ${type}`

    const deleteNotif = document.createElement('button')
    deleteNotif.className = 'btn-delete-notif'
    deleteNotif.id = 'btn-delete-notif'
    deleteNotif.innerHTML = '&#10005;'
    notification.textContent = message;
    notification.appendChild(deleteNotif);

    

    

    
    const container = document.getElementById('notificationArea');
    container.appendChild(notification);

    deleteNotif.addEventListener('click', () => {
        container.removeChild(notification)
    });

    setTimeout(() => {
        if (notification.parentNode === container) {
            container.removeChild(notification);
        }
    }, 5000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initializeApp);

async function initializeApp() {
    try {
        
        await fetchProducts();
        await fetchOrders();
        setupEventListeners();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}
// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞
async function fetchProducts() {
    try {
        const response = await fetch(`${API_URL}/goods?api_key=${API_KEY}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
        state.products = await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async function fetchOrders() {
    try {
        const response = await fetch(`${API_URL}/orders?api_key=${API_KEY}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤');
        state.orders = await response.json();
        if (state.products.length > 0) {
            updateOrdersTable();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞–π–¥–∏
function getProductNameById(id) {
    const product = state.products.find(p => p.id === id);
    return product ? product.name : '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω';
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–≤–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
function isWeekend(date) {
    const day = new Date(date).getDay();
    return day === 0 || day === 6;
}

function calculateDeliveryPrice(date, timeInterval) {
    let deliveryPrice = 200;

    if (isWeekend(date)) {
        deliveryPrice += 300;
    }

    if (!isWeekend(date) && timeInterval.startsWith('18:00')) {
        deliveryPrice += 200;
    }

    return deliveryPrice;
}

function calculateProductsTotal(goodIds) {
    return goodIds.reduce((total, id) => {
        const product = state.products.find(p => p.id === Number(id));
        return total + (product ? (product.discount_price || product.price) : 0);
    }, 0);
}

function updateTotalPrice() {
    const form = document.getElementById('editOrderForm');
    if (!form) return;

    const deliveryDate = form.querySelector('[name="delivery_date"]').value;
    const deliveryInterval = form.querySelector('[name="delivery_interval"]').value;
    
    const productItems = form.querySelectorAll('.product-item');
    const goodIds = Array.from(productItems).map(item => 
        Number(item.dataset.productId)
    );

    const deliveryPrice = calculateDeliveryPrice(deliveryDate, deliveryInterval);
    const productsTotal = calculateProductsTotal(goodIds);
    const totalPrice = productsTotal + deliveryPrice;

    const totalPriceElement = document.getElementById('orderTotalPrice');
    if (totalPriceElement) {
        totalPriceElement.innerHTML = `
            <div class="price-breakdown">
                <div>–¢–æ–≤–∞—Ä—ã: ${productsTotal}‚ÇΩ</div>
                <div>–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryPrice}‚ÇΩ</div>
                <div class="total">–ò—Ç–æ–≥–æ: ${totalPrice}‚ÇΩ</div>
            </div>
        `;
    }

    return totalPrice;
}

function updateOrdersTable() {
    if (!state.products || state.products.length === 0) {
        console.error('–¢–æ–≤–∞—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }

    const tableBody = document.querySelector('#ordersTable tbody');
    const noOrders = document.getElementById('noOrders');

    if (state.orders.length === 0) {
        if (tableBody) tableBody.innerHTML = '';
        if (noOrders) noOrders.style.display = 'block';
        return;
    }

    if (noOrders) noOrders.style.display = 'none';
    if (!tableBody) return;

    tableBody.innerHTML = state.orders.map((order, index) => {
        const orderProducts = order.good_ids.map(id => getProductNameById(id)).join(', ');
        const total = calculateProductsTotal(order.good_ids);
        
        return `
            <tr data-order-id="${order.id}">
                <td>${index + 1}</td>
                <td>${new Date(order.created_at).toLocaleString()}</td>
                <td>${orderProducts}</td>
                <td>${total}‚ÇΩ</td>
                <td>${new Date(order.delivery_date).toLocaleString().slice(0, 10)}, ${order.delivery_interval}</td>
                
                <td class="actions">
                    <button class="view-order" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å">üëÅÔ∏è</button>
                    <button class="edit-order" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="delete-order" title="–£–¥–∞–ª–∏—Ç—å">‚ùå</button>
                </td>
            </tr>
        `;
    }).join('');
}

function showModal(content) {
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    const modalContainer = document.createElement('div');
    modalContainer.className = 'modal';
    modalContainer.innerHTML = content;
    
    modalOverlay.appendChild(modalContainer);
    document.body.appendChild(modalOverlay);

    const closeButtons = modalOverlay.querySelectorAll('.close-modal');
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
            modalOverlay.remove();
        });
    });
}

function showViewModal(orderId) {
    const order = state.orders.find(o => o.id === Number(orderId));
    if (!order) return;

    const deliveryPrice = calculateDeliveryPrice(order.delivery_date, order.delivery_interval);
    const productsTotal = calculateProductsTotal(order.good_ids);
    const totalPrice = productsTotal + deliveryPrice;

    const modalContent = `
        <div class="modal-header">
            <h3>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}</h3>
            <button class="close-modal">√ó</button>
        </div>
        <div class="modal-body">
            <p><strong>–§–ò–û:</strong> ${order.full_name}</p>
            <p><strong>Email:</strong> ${order.email}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.phone}</p>
            <p><strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery_address}</p>
            <p><strong>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery_date}</p>
            <p><strong>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery_interval}</p>
            <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${order.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</p>
            <div class="order-products">
                <h4>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</h4>
                ${order.good_ids.map(id => {
                    const product = state.products.find(p => p.id === id);
                    return `
                        <div class="order-product-item">
                            ${getProductNameById(id)} - ${product ? (product.discount_price || product.price) + '‚ÇΩ' : '–¶–µ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'}
                        </div>
                    `;
                }).join('')}
            </div>
            <div class="price-breakdown">
                <div>–¢–æ–≤–∞—Ä—ã: ${productsTotal}‚ÇΩ</div>
                <div>–î–æ—Å—Ç–∞–≤–∫–∞: ${deliveryPrice}‚ÇΩ</div>
                <div class="total">–ò—Ç–æ–≥–æ: ${totalPrice}‚ÇΩ</div>
            </div>
        </div>
    `;

    showModal(modalContent);
}

function showEditModal(orderId) {
    const order = state.orders.find(o => o.id === Number(orderId));
    if (!order) return;

    const modalContent = `
        <div class="modal-header">
            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}</h3>
            <button class="close-modal">√ó</button>
        </div>
        <div class="modal-body">
            <form id="editOrderForm">
                <input type="hidden" name="orderId" value="${order.id}">
                <div class="form-group">
                    <label>–§–ò–û:</label>
                    <input type="text" name="full_name" value="${order.full_name}" required>
                </div>
                <div class="form-group">
                    <label>Email:</label>
                    <input type="email" name="email" value="${order.email}" required>
                </div>
                <div class="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                    <input type="tel" name="phone" value="${order.phone}" required>
                </div>
                <div class="form-group">
                    <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                    <input type="text" name="delivery_address" value="${order.delivery_address}" required>
                </div>
                <div class="form-group">
                    <label>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                    <input type="date" name="delivery_date" value="${order.delivery_date}" required>
                </div>
                <div class="form-group">
                    <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                    <select name="delivery_interval" required>
                        <option value="08:00-12:00" ${order.delivery_interval === '08:00-12:00' ? 'selected' : ''}>08:00-12:00</option>
                        <option value="12:00-14:00" ${order.delivery_interval === '12:00-14:00' ? 'selected' : ''}>12:00-14:00</option>
                        <option value="14:00-18:00" ${order.delivery_interval === '14:00-18:00' ? 'selected' : ''}>14:00-18:00</option>
                        <option value="18:00-22:00" ${order.delivery_interval === '18:00-22:00' ? 'selected' : ''}>18:00-22:00</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                    <textarea name="comment">${order.comment || ''}</textarea>
                </div>

                <div class="form-group products-section">
                    <h4>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ</h4>
                    <div class="products-list">
                        ${order.good_ids.map(goodId => {
                            const product = state.products.find(p => p.id === goodId);
                            return `
                                <div class="product-item" data-product-id="${goodId}">
                                    <span class="product-name">${getProductNameById(goodId)}</span>
                                    <span class="product-price">${product ? (product.discount_price || product.price) + '‚ÇΩ' : ''}</span>
                                    <button type="button" class="btn-remove-product">–£–¥–∞–ª–∏—Ç—å</button>
                                </div>
                            `;
                        }).join('')}
                    </div>
                    
                    <div class="order-total" id="orderTotalPrice">
                        <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å -->
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button type="button" class="btn-cancel close-modal">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </form>
        </div>
    `;

    showModal(modalContent);
    
    setupProductHandlers(order);
    updateTotalPrice();

    const form = document.getElementById('editOrderForm');
    const dateInput = form.querySelector('[name="delivery_date"]');
    
    dateInput.addEventListener('change', (e) => {
        if (!isValidDeliveryDate(e.target.value)) {
            showNotification('–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã', 'error');
            e.target.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–∞—Ç—ã
        }
        updateTotalPrice();
    });

    form.querySelector('[name="delivery_date"]').addEventListener('change', updateTotalPrice);
    form.querySelector('[name="delivery_interval"]').addEventListener('change', updateTotalPrice);

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const goodIds = Array.from(form.querySelectorAll('.product-item'))
            .map(item => Number(item.dataset.productId));
        await updateOrder(new FormData(e.target), goodIds);
    });
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ 
async function updateOrder(formData, goodIds) {
    try {
        
        const deliveryDate = formData.get('delivery_date');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        if (!isValidDeliveryDate(deliveryDate)) {
            throw new Error('–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã');
        }
        
        const orderId = formData.get('orderId');
        const orderData = {
            full_name: formData.get('full_name'),
            email: formData.get('email'),
            phone: formData.get('phone'),
            delivery_address: formData.get('delivery_address'),
            delivery_date: deliveryDate,
            delivery_interval: formData.get('delivery_interval'),
            comment: formData.get('comment'),
            good_ids: goodIds
        };

        const response = await fetch(`${API_URL}/orders/${orderId}?api_key=${API_KEY}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');

        const updatedOrder = await response.json();
        const orderIndex = state.orders.findIndex(o => o.id === Number(orderId));
        if (orderIndex !== -1) {
            state.orders[orderIndex] = updatedOrder;
        }

        updateOrdersTable();
        showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modalOverlay = document.querySelector('.modal-overlay');
        if (modalOverlay) modalOverlay.remove();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', 'error');
    } 
}
function deleteOrder(orderId) {
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const template = document.getElementById('deleteOrderModal');
    if (!template) {
        console.error('–®–∞–±–ª–æ–Ω –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º overlay –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
    const modalContent = template.content.cloneNode(true);
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalElement = modalOverlay.querySelector('.delete-order-modal');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const confirmButton = modalElement.querySelector('.confirm-delete');
    const closeButtons = modalElement.querySelectorAll('.close-modal');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    confirmButton.addEventListener('click', async () => {
        await handleDeleteOrder(orderId);
        modalOverlay.remove();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
            modalOverlay.remove();
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            modalOverlay.remove();
        }
    });
}
        
async function handleDeleteOrder(orderId) {
    try {
        
        
        const response = await fetch(`${API_URL}/orders/${orderId}?api_key=${API_KEY}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.orders = state.orders.filter(order => order.id !== parseInt(orderId));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        updateOrdersTable();
        showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', 'error');
    }
}
        
function setupProductHandlers(order) {
    const form = document.getElementById('editOrderForm');
    if (!form) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    form.querySelectorAll('.btn-remove-product').forEach(button => {
        button.addEventListener('click', function() {
            const productItem = this.closest('.product-item');
            if (productItem) {
                productItem.remove();
                updateTotalPrice();
            }
        });
    });
        
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    const addProductButton = form.querySelector('.btn-add-product');
    const productSelect = form.querySelector('#availableProducts');

    if (addProductButton && productSelect) {
        addProductButton.addEventListener('click', () => {
            const selectedProductId = Number(productSelect.value);
            if (!selectedProductId) return;

            const product = state.products.find(p => p.id === selectedProductId);
            if (!product) return;

            const productsList = form.querySelector('.products-list');
            const productItem = document.createElement('div');
            productItem.className = 'product-item';
            productItem.dataset.productId = product.id;
            productItem.innerHTML = `
                <span class="product-name">${product.name}</span>
                <span class="product-price">${product.discount_price || product.price}‚ÇΩ</span>
                <button type="button" class="btn-remove-product">–£–¥–∞–ª–∏—Ç—å</button>
            `;

            productsList.appendChild(productItem);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            const removeButton = productItem.querySelector('.btn-remove-product');
            removeButton.addEventListener('click', function() {
                productItem.remove();
                updateTotalPrice();
            });

            // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            const option = productSelect.querySelector(`option[value="${product.id}"]`);
            if (option) option.remove();

            updateTotalPrice();
        });
    }
}

function setupEventListeners() {
    const ordersTable = document.getElementById('ordersTable');
    if (!ordersTable) return;

    ordersTable.addEventListener('click', async (e) => {
        const target = e.target;
        const orderRow = target.closest('tr');
        if (!orderRow) return;

        const orderId = orderRow.dataset.orderId;
        if (!orderId) return;

        if (target.classList.contains('view-order')) {
            showViewModal(orderId);
        } else if (target.classList.contains('edit-order')) {
            showEditModal(orderId);
        } else if (target.classList.contains('delete-order')) {
            deleteOrder(orderId);
        }
    });
}



function isValidDeliveryDate(deliveryDate) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
    const deliveryDateTime = new Date(deliveryDate);
    const currentDate = new Date();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    deliveryDateTime.setHours(0, 0, 0, 0);
    currentDate.setHours(0, 0, 0, 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    return deliveryDateTime >= currentDate;
}